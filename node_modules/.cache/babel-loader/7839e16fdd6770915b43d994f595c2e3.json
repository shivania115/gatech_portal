{"ast":null,"code":"import _objectSpread from \"/Users/lisasun/Documents/Dashboard/MondoDB/portal_new/stitch-tutorial-todo-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { feature } from \"topojson-client\";\nexport function getCoords(w, h, t) {\n  var xOffset = (w * t.k - w) / 2;\n  var yOffset = (h * t.k - h) / 2;\n  return [w / 2 - (xOffset + t.x) / t.k, h / 2 - (yOffset + t.y) / t.k];\n}\nexport function fetchGeographies(url) {\n  return fetch(url).then(function (res) {\n    if (!res.ok) {\n      throw Error(res.statusText);\n    }\n\n    console.log(res);\n    return res.json();\n  }).catch(function (error) {\n    console.log(\"There was a problem when fetching the data: \", error);\n  });\n}\nexport function getFeatures(geographies, parseGeographies) {\n  if (Array.isArray(geographies)) return parseGeographies ? parseGeographies(geographies) : geographies;\n  var feats = feature(geographies, geographies.objects[Object.keys(geographies.objects)[0]]).features;\n  return parseGeographies ? parseGeographies(feats) : feats;\n}\nexport function prepareFeatures(geographies, path) {\n  return geographies ? geographies.map(function (d, i) {\n    return _objectSpread({}, d, {\n      rsmKey: \"geo-\".concat(i),\n      svgPath: path(d)\n    });\n  }) : [];\n}\nexport function createConnectorPath() {\n  var dx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 30;\n  var dy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 30;\n  var curve = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.5;\n  var curvature = Array.isArray(curve) ? curve : [curve, curve];\n  var curveX = dx / 2 * curvature[0];\n  var curveY = dy / 2 * curvature[1];\n  return \"M\".concat(0, \",\", 0, \" Q\", -dx / 2 - curveX, \",\").concat(-dy / 2 + curveY, \" \").concat(-dx, \",\").concat(-dy);\n}\nexport function isString(geo) {\n  return typeof geo === \"string\";\n}","map":{"version":3,"sources":["/Users/lisasun/Documents/Dashboard/MondoDB/portal_new/stitch-tutorial-todo-web/src/components/utils.js"],"names":["feature","getCoords","w","h","t","xOffset","k","yOffset","x","y","fetchGeographies","url","fetch","then","res","ok","Error","statusText","console","log","json","catch","error","getFeatures","geographies","parseGeographies","Array","isArray","feats","objects","Object","keys","features","prepareFeatures","path","map","d","i","rsmKey","svgPath","createConnectorPath","dx","dy","curve","curvature","curveX","curveY","isString","geo"],"mappings":"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","sourcesContent":["\nimport { feature } from \"topojson-client\"\n\nexport function getCoords(w, h, t) {\n  const xOffset = (w * t.k - w) / 2\n  const yOffset = (h * t.k - h) / 2\n  return [w / 2 - (xOffset + t.x) / t.k, h / 2 - (yOffset + t.y) / t.k]\n}\n\nexport function fetchGeographies(url) {\n  return fetch(url)\n    .then(res => {\n      if (!res.ok) {\n        throw Error(res.statusText)\n      }\n      console.log(res)\n      return res.json()\n    }).catch(error => {\n      console.log(\"There was a problem when fetching the data: \", error)\n    })\n}\n\nexport function getFeatures(geographies, parseGeographies) {\n  if (Array.isArray(geographies)) return parseGeographies ? parseGeographies(geographies) : geographies\n  const feats = feature(\n    geographies,\n    geographies.objects[Object.keys(geographies.objects)[0]]\n  ).features\n  return parseGeographies ? parseGeographies(feats) : feats\n}\n\nexport function prepareFeatures(geographies, path) {\n  return geographies ? geographies.map((d, i) => {\n    return {\n      ...d,\n      rsmKey: `geo-${i}`,\n      svgPath: path(d),\n    }\n  }) : []\n}\n\nexport function createConnectorPath(dx = 30, dy = 30, curve = 0.5) {\n  const curvature = Array.isArray(curve) ? curve : [curve, curve]\n  const curveX = dx / 2 * curvature[0]\n  const curveY = dy / 2 * curvature[1]\n  return `M${0},${0} Q${-dx / 2 - curveX},${-dy / 2 + curveY} ${-dx},${-dy}`\n}\n\nexport function isString(geo) { return typeof geo === \"string\" }\n"]},"metadata":{},"sourceType":"module"}