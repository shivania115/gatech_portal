{"ast":null,"code":"import _slicedToArray from \"/Users/lisasun/Documents/Dashboard/MondoDB/portal_new/stitch-tutorial-todo-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/lisasun/Documents/Dashboard/MondoDB/portal_new/stitch-tutorial-todo-web/src/components/GAMap.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Container, Grid, Dropdown, Breadcrumb, Header, List, Loader, Divider, Image } from 'semantic-ui-react';\nimport { geoCentroid } from \"d3-geo\";\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap'; //import Marker from './Marker';\n//import Annotation from './Annotation';\n\nimport ReactTooltip from \"react-tooltip\";\nimport { VictoryChart, VictoryGroup, VictoryBar, VictoryTheme, VictoryAxis, VictoryLegend, VictoryLine, VictoryLabel, VictoryScatter } from 'victory';\nimport { useHistory } from \"react-router-dom\";\nimport Notes from './Notes';\nimport _ from 'lodash';\nimport { scaleQuantile } from \"d3-scale\";\nimport configs from \"./state_config.json\";\nimport ReactDOM from 'react-dom';\n\nfunction numberWithCommas(x) {\n  x = x.toString();\n  var pattern = /(-?\\d+)(\\d{3})/;\n\n  while (pattern.test(x)) {\n    x = x.replace(pattern, \"$1,$2\");\n  }\n\n  return x;\n} //const geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\n\n\nvar geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/counties-10m.json\";\nvar colorPalette = [\"#e1dce2\", \"#d3b6cd\", \"#bf88b5\", \"#af5194\", \"#99528c\", \"#633c70\"];\nvar colorHighlight = '#f2a900'; // function MapLabels(props){\n//   const offsets = {\n//     VT: [50, -8],\n//     NH: [34, 2],\n//     MA: [30, -1],\n//     RI: [28, 2],\n//     CT: [35, 10],\n//     NJ: [34, 1],\n//     DE: [33, 0],\n//     MD: [47, 10],\n//     DC: [49, 21],\n//   };\n//   return (\n//     <svg>\n//       {props.geographies.map(geo => {\n//           const centroid = geoCentroid(geo);\n//           const cur = props.stateLabels.find(s => s.val === geo.id);\n//           return (\n//             <g key={geo.rsmKey + \"-name\"}>\n//               {cur &&\n//                 centroid[0] > -160 &&\n//                 centroid[0] < -67 &&\n//                 (Object.keys(offsets).indexOf(cur.id) === -1 ? (\n//                   <Marker coordinates={centroid}>\n//                     <text y=\"2\" fontSize={14} textAnchor=\"middle\" fill=\"#eee\">\n//                       {cur.id}\n//                     </text>\n//                   </Marker>\n//                 ) : (\n//                   <Annotation\n//                     subject={centroid}\n//                     dx={offsets[cur.id][0]}\n//                     dy={offsets[cur.id][1]}\n//                   >\n//                     <text x={4} fontSize={14} alignmentBaseline=\"middle\">\n//                       {cur.id}\n//                     </text>\n//                   </Annotation>\n//                 ))}\n//             </g>\n//           );\n//         })}\n//     </svg>\n//     );\n// }\n\nexport default function GAMap(props) {\n  var _useState = useState('Georgia'),\n      _useState2 = _slicedToArray(_useState, 2),\n      stateName = _useState2[0],\n      setStateName = _useState2[1];\n\n  var _useState3 = useState('13'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      fips = _useState4[0],\n      setFips = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      tooltipContent = _useState6[0],\n      setTooltipContent = _useState6[1];\n\n  var history = useHistory();\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      dataFltrd = _useState8[0],\n      setDataFltrd = _useState8[1];\n\n  var _useState9 = useState(),\n      _useState10 = _slicedToArray(_useState9, 2),\n      dataStateFltrd = _useState10[0],\n      setDataStateFltrd = _useState10[1];\n\n  var _useState11 = useState(),\n      _useState12 = _slicedToArray(_useState11, 2),\n      dataState = _useState12[0],\n      setDataState = _useState12[1];\n\n  var _useState13 = useState(),\n      _useState14 = _slicedToArray(_useState13, 2),\n      data = _useState14[0],\n      setData = _useState14[1];\n\n  var _useState15 = useState(''),\n      _useState16 = _slicedToArray(_useState15, 2),\n      date = _useState16[0],\n      setDate = _useState16[1];\n\n  var _useState17 = useState(),\n      _useState18 = _slicedToArray(_useState17, 2),\n      stateLabels = _useState18[0],\n      setStateLabels = _useState18[1];\n\n  var _useState19 = useState(),\n      _useState20 = _slicedToArray(_useState19, 2),\n      colorScale = _useState20[0],\n      setColorScale = _useState20[1];\n\n  var _useState21 = useState([]),\n      _useState22 = _slicedToArray(_useState21, 2),\n      legendMax = _useState22[0],\n      setLegendMax = _useState22[1];\n\n  var _useState23 = useState([]),\n      _useState24 = _slicedToArray(_useState23, 2),\n      legendMin = _useState24[0],\n      setLegendMin = _useState24[1];\n\n  var _useState25 = useState([]),\n      _useState26 = _slicedToArray(_useState25, 2),\n      legendSplit = _useState26[0],\n      setLegendSplit = _useState26[1];\n\n  var _useState27 = useState('mean7daycases'),\n      _useState28 = _slicedToArray(_useState27, 2),\n      metric = _useState28[0],\n      setMetric = _useState28[1];\n\n  var _useState29 = useState('mean7daycases'),\n      _useState30 = _slicedToArray(_useState29, 2),\n      metricOptions = _useState30[0],\n      setMetricOptions = _useState30[1];\n\n  var _useState31 = useState('Average Daily COVID-19 Cases'),\n      _useState32 = _slicedToArray(_useState31, 2),\n      metricName = _useState32[0],\n      setMetricName = _useState32[1];\n\n  var _useState33 = useState({}),\n      _useState34 = _slicedToArray(_useState33, 2),\n      varMap = _useState34[0],\n      setVarMap = _useState34[1];\n\n  var _useState35 = useState(),\n      _useState36 = _slicedToArray(_useState35, 2),\n      delayHandler = _useState36[0],\n      setDelayHandler = _useState36[1];\n\n  useEffect(function () {\n    fetch('/data/rawdata/variable_mapping.json').then(function (res) {\n      return res.json();\n    }).then(function (x) {\n      setVarMap(x);\n      setMetricOptions(_.filter(_.map(x, function (d) {\n        return {\n          key: d.id,\n          value: d.variable,\n          text: d.name,\n          group: d.group\n        };\n      }), function (d) {\n        return d.text !== \"Urban-Rural Status\" && d.group === \"outcomes\";\n      }));\n    });\n  }, []);\n  useEffect(function () {\n    if (metric) {\n      fetch('/data/data.json').then(function (res) {\n        return res.json();\n      }).then(function (x) {\n        setData(x);\n        setDataFltrd(_.filter(_.map(x, function (d, k) {\n          d.fips = k;\n          return d;\n        }), function (d) {\n          return d.Population > 10000 && d.black > 5 && d.fips.length === 5 && d['covidmortalityfig'] > 0;\n        }));\n        var cs = scaleQuantile().domain(_.map(_.filter(_.map(x, function (d, k) {\n          d.fips = k;\n          return d;\n        }), function (d) {\n          return d[metric] >= 0 && d.fips.length === 5;\n        }), function (d) {\n          return d[metric];\n        })).range(colorPalette);\n        var scaleMap = {};\n\n        _.each(x, function (d) {\n          if (d[metric] >= 0) {\n            scaleMap[d[metric]] = cs(d[metric]);\n          }\n        });\n\n        setColorScale(scaleMap);\n        var max = 0;\n        var min = 100;\n        var length = 0;\n\n        _.each(x, function (d) {\n          if (d[metric] > max && d.fips.length === 5) {\n            max = d[metric];\n          } else if (d.fips.length === 5 && d[metric] < min && d[metric] >= 0) {\n            min = d[metric];\n          }\n        });\n\n        if (max > 999999) {\n          max = (max / 1000000).toFixed(0) + \"M\";\n          setLegendMax(max);\n        } else if (max > 999) {\n          max = (max / 1000).toFixed(0) + \"K\";\n          setLegendMax(max);\n        } else {\n          setLegendMax(max.toFixed(0));\n        }\n\n        setLegendMin(min.toFixed(0));\n        var split = scaleQuantile().domain(_.map(_.filter(_.map(x, function (d, k) {\n          d.fips = k;\n          return d;\n        }), function (d) {\n          return d[metric] >= 0 && d.fips.length === 5;\n        }), function (d) {\n          return d[metric];\n        })).range(colorPalette);\n        setLegendSplit(split.quantiles());\n      });\n      fetch('/data/date.json').then(function (res) {\n        return res.json();\n      }).then(function (x) {\n        return setDate(x.date.substring(5, 7) + \"/\" + x.date.substring(8, 10) + \"/\" + x.date.substring(0, 4));\n      });\n      fetch('/data/allstates.json').then(function (res) {\n        return res.json();\n      }).then(function (x) {\n        return setStateLabels(x);\n      });\n      fetch('/data/data.json').then(function (res) {\n        return res.json();\n      }).then(function (x) {\n        setDataState(x);\n        setDataStateFltrd(_.filter(_.map(x, function (c, l) {\n          c.fips = l;\n          return c;\n        }), function (c) {\n          return c.fips.length === 2;\n        }));\n      });\n    }\n  }, [metric]);\n\n  if (data && dataFltrd && stateLabels && dataStateFltrd && dataState) {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, React.createElement(ComposableMap, {\n      projection: \"geoAlbersUsa\",\n      \"data-tip\": \"\",\n      width: 630,\n      height: 380,\n      strokeWidth: 0.1,\n      stroke: \"black\",\n      projectionConfig: {\n        scale: 750\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, React.createElement(Geographies, {\n      geography: geoUrl,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }, function (_ref) {\n      var geographies = _ref.geographies;\n      return React.createElement(\"svg\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 242\n        },\n        __self: this\n      }, geographies.map(function (geo) {\n        return React.createElement(Geography, {\n          key: geo.rsmKey,\n          geography: geo,\n          onMouseEnter: function onMouseEnter() {\n            //console.log(geo); \n            var stateFips = geo.id.substring(0, 2);\n            var configMatched = configs.find(function (s) {\n              return s.fips === stateFips;\n            });\n            setFips(stateFips);\n            setStateName(configMatched.name); //setStateName(geo.id.substring(0,2));\n            //setStateName(geo.properties.name); \n            //setTooltipContent()                            \n          },\n          onMouseLeave: function onMouseLeave() {\n            setTooltipContent(\"\");\n          },\n          onClick: function onClick() {\n            history.push(\"/\" + geo.id.substring(0, 2) + \"\");\n          },\n          fill: fips === geo.id.substring(0, 2) ? colorHighlight : colorScale && data[geo.id] && data[geo.id][metric] > 0 ? colorScale[data[geo.id][metric]] : colorScale && data[geo.id] && data[geo.id][metric] === 0 ? '#e1dce2' : '#FFFFFF',\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 244\n          },\n          __self: this\n        });\n      }), React.createElement(MapLabels, {\n        geographies: geographies,\n        stateLabels: stateLabels,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 279\n        },\n        __self: this\n      }));\n    })));\n  } else {\n    return React.createElement(Loader, {\n      active: true,\n      inline: \"centered\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    });\n  }\n}","map":{"version":3,"sources":["/Users/lisasun/Documents/Dashboard/MondoDB/portal_new/stitch-tutorial-todo-web/src/components/GAMap.js"],"names":["React","useEffect","useState","Container","Grid","Dropdown","Breadcrumb","Header","List","Loader","Divider","Image","geoCentroid","Geographies","Geography","ComposableMap","ReactTooltip","VictoryChart","VictoryGroup","VictoryBar","VictoryTheme","VictoryAxis","VictoryLegend","VictoryLine","VictoryLabel","VictoryScatter","useHistory","Notes","_","scaleQuantile","configs","ReactDOM","numberWithCommas","x","toString","pattern","test","replace","geoUrl","colorPalette","colorHighlight","GAMap","props","stateName","setStateName","fips","setFips","tooltipContent","setTooltipContent","history","dataFltrd","setDataFltrd","dataStateFltrd","setDataStateFltrd","dataState","setDataState","data","setData","date","setDate","stateLabels","setStateLabels","colorScale","setColorScale","legendMax","setLegendMax","legendMin","setLegendMin","legendSplit","setLegendSplit","metric","setMetric","metricOptions","setMetricOptions","metricName","setMetricName","varMap","setVarMap","delayHandler","setDelayHandler","fetch","then","res","json","filter","map","d","key","id","value","variable","text","name","group","k","Population","black","length","cs","domain","range","scaleMap","each","max","min","toFixed","split","quantiles","substring","c","l","scale","geographies","geo","rsmKey","stateFips","configMatched","find","s","push"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Container, Grid, Dropdown, Breadcrumb, Header, List, Loader, Divider, Image } from 'semantic-ui-react'\nimport { geoCentroid } from \"d3-geo\";\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\n//import Marker from './Marker';\n//import Annotation from './Annotation';\nimport ReactTooltip from \"react-tooltip\";\nimport { VictoryChart, \n  VictoryGroup, \n  VictoryBar, \n  VictoryTheme, \n  VictoryAxis, \n  VictoryLegend,\n  VictoryLine,  \n  VictoryLabel, \n  VictoryScatter,\n} from 'victory';\nimport { useHistory } from \"react-router-dom\";\nimport Notes from './Notes';\nimport _ from 'lodash';\nimport { scaleQuantile } from \"d3-scale\";\nimport configs from \"./state_config.json\";\nimport ReactDOM from 'react-dom';\n\n\nfunction numberWithCommas(x) {\n    x = x.toString();\n    var pattern = /(-?\\d+)(\\d{3})/;\n    while (pattern.test(x))\n        x = x.replace(pattern, \"$1,$2\");\n    return x;\n}\n\n//const geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/counties-10m.json\"\nconst colorPalette = [\n        \"#e1dce2\",\n        \"#d3b6cd\",\n        \"#bf88b5\", \n        \"#af5194\", \n        \"#99528c\", \n        \"#633c70\", \n      ];\nconst colorHighlight = '#f2a900';\n\n\n// function MapLabels(props){\n\n//   const offsets = {\n//     VT: [50, -8],\n//     NH: [34, 2],\n//     MA: [30, -1],\n//     RI: [28, 2],\n//     CT: [35, 10],\n//     NJ: [34, 1],\n//     DE: [33, 0],\n//     MD: [47, 10],\n//     DC: [49, 21],\n//   };\n\n//   return (\n//     <svg>\n\n//       {props.geographies.map(geo => {\n//           const centroid = geoCentroid(geo);\n//           const cur = props.stateLabels.find(s => s.val === geo.id);\n//           return (\n//             <g key={geo.rsmKey + \"-name\"}>\n//               {cur &&\n//                 centroid[0] > -160 &&\n//                 centroid[0] < -67 &&\n//                 (Object.keys(offsets).indexOf(cur.id) === -1 ? (\n//                   <Marker coordinates={centroid}>\n//                     <text y=\"2\" fontSize={14} textAnchor=\"middle\" fill=\"#eee\">\n//                       {cur.id}\n//                     </text>\n//                   </Marker>\n//                 ) : (\n//                   <Annotation\n//                     subject={centroid}\n//                     dx={offsets[cur.id][0]}\n//                     dy={offsets[cur.id][1]}\n//                   >\n//                     <text x={4} fontSize={14} alignmentBaseline=\"middle\">\n//                       {cur.id}\n//                     </text>\n//                   </Annotation>\n//                 ))}\n//             </g>\n//           );\n//         })}\n//     </svg>\n//     );\n// }\n\n\nexport default function GAMap(props) {\n\n  const [stateName, setStateName] = useState('Georgia');\n  const [fips, setFips] = useState('13');\n  const [tooltipContent, setTooltipContent] = useState('');\n  const history = useHistory();\n  const [dataFltrd, setDataFltrd] = useState();\n\n  const [dataStateFltrd, setDataStateFltrd] = useState();\n  const [dataState, setDataState] = useState();\n\n  const [data, setData] = useState();\n  const [date, setDate] = useState('');\n  const [stateLabels, setStateLabels] = useState();\n  const [colorScale, setColorScale] = useState();\n\n  const [legendMax, setLegendMax] = useState([]);\n  const [legendMin, setLegendMin] = useState([]);\n  const [legendSplit, setLegendSplit] = useState([]);\n\n  const [metric, setMetric] = useState('mean7daycases');\n  const [metricOptions, setMetricOptions] = useState('mean7daycases');\n  const [metricName, setMetricName] = useState('Average Daily COVID-19 Cases');\n\n  const [varMap, setVarMap] = useState({});\n  const [delayHandler, setDelayHandler] = useState();\n\n\n  useEffect(()=>{\n    fetch('/data/rawdata/variable_mapping.json').then(res => res.json())\n      .then(x => {\n        setVarMap(x);\n        setMetricOptions(_.filter(_.map(x, d=> {\n          return {key: d.id, value: d.variable, text: d.name, group: d.group};\n        }), d => (d.text !== \"Urban-Rural Status\" && d.group === \"outcomes\")));\n      });\n  }, []);\n\n\n\n\n  useEffect(() => {\n    if (metric) {\n    fetch('/data/data.json').then(res => res.json())\n      .then(x => {\n        \n        setData(x);\n        setDataFltrd(_.filter(_.map(x, (d, k) => {\n          d.fips = k\n          return d}), \n          d => (d.Population > 10000 && \n              d.black > 5 && \n              d.fips.length === 5 && \n              d['covidmortalityfig'] > 0)));\n      \n        const cs = scaleQuantile()\n        .domain(_.map(_.filter(_.map(x, (d, k) => {\n          d.fips = k\n          return d}), \n          d => (\n              d[metric] >= 0 &&\n              d.fips.length === 5)),\n          d=> d[metric]))\n        .range(colorPalette);\n\n        let scaleMap = {}\n        _.each(x, d=>{\n          if(d[metric] >= 0){\n          scaleMap[d[metric]] = cs(d[metric])}});\n      \n        setColorScale(scaleMap);\n        var max = 0\n        var min = 100\n        var length = 0\n        _.each(x, d=> { \n          if (d[metric] > max && d.fips.length === 5) {\n            max = d[metric]\n          } else if (d.fips.length === 5 && d[metric] < min && d[metric] >= 0){\n            min = d[metric]\n          }\n        });\n\n        if (max > 999999) {\n          max = (max/1000000).toFixed(0) + \"M\";\n          setLegendMax(max);\n        }else if (max > 999) {\n          max = (max/1000).toFixed(0) + \"K\";\n          setLegendMax(max);\n        }else{\n          setLegendMax(max.toFixed(0));\n\n        }\n        setLegendMin(min.toFixed(0));\n\n        var split = scaleQuantile()\n        .domain(_.map(_.filter(_.map(x, (d, k) => {\n          d.fips = k\n          return d}), \n          d => (\n              d[metric] >= 0 &&\n              d.fips.length === 5)),\n          d=> d[metric]))\n        .range(colorPalette);\n\n        setLegendSplit(split.quantiles());\n\n\n      });\n\n    fetch('/data/date.json').then(res => res.json())\n      .then(x => setDate(x.date.substring(5,7) + \"/\" + x.date.substring(8,10) + \"/\" + x.date.substring(0,4)));\n    \n    fetch('/data/allstates.json').then(res => res.json())\n      .then(x => setStateLabels(x));\n\n    fetch('/data/data.json').then(res => res.json())\n      .then(x => {\n        setDataState(x);\n        setDataStateFltrd(_.filter(_.map(x, (c, l) => {\n          c.fips = l\n          return c}),\n          c => (c.fips.length === 2)));\n      });\n    }\n\n  }, [metric])\n\n  if (data && dataFltrd && stateLabels && dataStateFltrd && dataState) {\n\n  return (\n      <div>\n              \n        <ComposableMap \n          projection=\"geoAlbersUsa\" \n          data-tip=\"\"\n          width={630} \n          height={380}\n          strokeWidth= {0.1}\n          stroke= 'black'\n          projectionConfig={{scale: 750}}\n           >\n          <Geographies geography={geoUrl}>\n            {({ geographies }) => \n              <svg>\n                {geographies.map(geo => (\n                  <Geography\n                    key={geo.rsmKey}\n                    geography={geo}\n                    onMouseEnter={()=>{\n\n                      //console.log(geo); \n                      const stateFips = geo.id.substring(0,2);\n                      const configMatched = configs.find(s => s.fips === stateFips);\n\n                      setFips(stateFips);\n                      setStateName(configMatched.name);\n                      //setStateName(geo.id.substring(0,2));\n                      //setStateName(geo.properties.name); \n                      //setTooltipContent()                            \n                    \n                    }}\n\n\n\n                    onMouseLeave={()=>{\n                      setTooltipContent(\"\")\n                    }}\n                    onClick={()=>{\n                      history.push(\"/\"+geo.id.substring(0,2)+\"\");\n                    }}\n\n                    \n                    fill={fips===geo.id.substring(0,2)?colorHighlight:\n                    ((colorScale && data[geo.id] && (data[geo.id][metric]) > 0)?\n                        colorScale[data[geo.id][metric]]: \n                        (colorScale && data[geo.id] && data[geo.id][metric] === 0)?\n                          '#e1dce2':'#FFFFFF')}\n                    \n                  />\n                ))}\n                <MapLabels geographies={geographies} stateLabels={stateLabels} />\n              </svg>\n            }\n          </Geographies>\n          \n\n        </ComposableMap>\n                \n        \n      </div>\n      );\n  } else {\n    return <Loader active inline='centered' />\n  }\n}"]},"metadata":{},"sourceType":"module"}