{"ast":null,"code":"import _slicedToArray from \"/Users/lisasun/Documents/Dashboard/MondoDB/portal_new/stitch-tutorial-todo-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/lisasun/Documents/Dashboard/MondoDB/portal_new/stitch-tutorial-todo-web/src/components/GAMap.js\";\nimport React, { useEffect, useState } from 'react';\nimport { Container, Grid, Dropdown, Breadcrumb, Header, List, Loader, Divider, Image } from 'semantic-ui-react';\nimport { geoCentroid } from \"d3-geo\";\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\nimport ReactTooltip from \"react-tooltip\";\nimport { useHistory } from \"react-router-dom\";\nimport _ from 'lodash';\nimport { scaleQuantile } from \"d3-scale\";\nimport configs from \"./state_config.json\";\nimport ReactDOM from 'react-dom';\n\nfunction numberWithCommas(x) {\n  x = x.toString();\n  var pattern = /(-?\\d+)(\\d{3})/;\n\n  while (pattern.test(x)) {\n    x = x.replace(pattern, \"$1,$2\");\n  }\n\n  return x;\n} //const geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\n//const geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/counties-10m.json\"\n\n\nvar geoUrl = \"https://raw.githubusercontent.com/deldersveld/topojson/master/countries/us-states/GA-13-georgia-counties.json\";\nvar colorPalette = [\"#e1dce2\", \"#d3b6cd\", \"#bf88b5\", \"#af5194\", \"#99528c\", \"#633c70\"];\nvar colorHighlight = '#f2a900';\nexport default function GAMap(props) {\n  var _useState = useState('Georgia'),\n      _useState2 = _slicedToArray(_useState, 2),\n      stateName = _useState2[0],\n      setStateName = _useState2[1];\n\n  var _useState3 = useState('13'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      fips = _useState4[0],\n      setFips = _useState4[1];\n\n  var _useState5 = useState(''),\n      _useState6 = _slicedToArray(_useState5, 2),\n      tooltipContent = _useState6[0],\n      setTooltipContent = _useState6[1];\n\n  var history = useHistory();\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      dataFltrd = _useState8[0],\n      setDataFltrd = _useState8[1];\n\n  var _useState9 = useState(),\n      _useState10 = _slicedToArray(_useState9, 2),\n      dataStateFltrd = _useState10[0],\n      setDataStateFltrd = _useState10[1];\n\n  var _useState11 = useState(),\n      _useState12 = _slicedToArray(_useState11, 2),\n      dataState = _useState12[0],\n      setDataState = _useState12[1];\n\n  var _useState13 = useState(),\n      _useState14 = _slicedToArray(_useState13, 2),\n      data = _useState14[0],\n      setData = _useState14[1];\n\n  var _useState15 = useState(''),\n      _useState16 = _slicedToArray(_useState15, 2),\n      date = _useState16[0],\n      setDate = _useState16[1];\n\n  var _useState17 = useState(),\n      _useState18 = _slicedToArray(_useState17, 2),\n      stateLabels = _useState18[0],\n      setStateLabels = _useState18[1];\n\n  var _useState19 = useState(),\n      _useState20 = _slicedToArray(_useState19, 2),\n      colorScale = _useState20[0],\n      setColorScale = _useState20[1];\n\n  var _useState21 = useState([]),\n      _useState22 = _slicedToArray(_useState21, 2),\n      legendMax = _useState22[0],\n      setLegendMax = _useState22[1];\n\n  var _useState23 = useState([]),\n      _useState24 = _slicedToArray(_useState23, 2),\n      legendMin = _useState24[0],\n      setLegendMin = _useState24[1];\n\n  var _useState25 = useState([]),\n      _useState26 = _slicedToArray(_useState25, 2),\n      legendSplit = _useState26[0],\n      setLegendSplit = _useState26[1];\n\n  var _useState27 = useState('mean7daycases'),\n      _useState28 = _slicedToArray(_useState27, 2),\n      metric = _useState28[0],\n      setMetric = _useState28[1];\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(ComposableMap, {\n    projection: \"geoAlbersUsa\",\n    \"data-tip\": \"\",\n    width: 630,\n    height: 380,\n    strokeWidth: 0.1,\n    stroke: \"black\",\n    projectionConfig: {\n      scale: 750\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(Geographies, {\n    geography: geoUrl,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, function (_ref) {\n    var geographies = _ref.geographies;\n    return React.createElement(\"svg\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, geographies.map(function (geo) {\n      return React.createElement(Geography, {\n        key: geo.rsmKey,\n        geography: geo // onMouseEnter={()=>{\n        //   //console.log(geo); \n        //   const stateFips = geo.id.substring(0,2);\n        //   //const stateFips = 13;\n        //   console.log(stateFips)\n        //   const configMatched = configs.find(s => s.fips === stateFips);\n        //   setFips(stateFips);\n        //   setStateName(configMatched.name);\n        //   //setStateName(geo.id.substring(0,2));\n        //   //setStateName(geo.properties.name); \n        //   //setTooltipContent()                            \n        // }}\n        // onMouseLeave={()=>{\n        //   setTooltipContent(\"\")\n        // }}\n        // onClick={()=>{\n        //   history.push(\"/\"+geo.id.substring(0,2)+\"\");\n        // }}\n        //fill={fips===geo.id.substring(0,2)?colorHighlight:\n        ,\n        fill: fips === 13 ? colorHighlight : colorScale && data[geo.id] && data[geo.id][metric] > 0 ? colorScale[data[geo.id][metric]] : colorScale && data[geo.id] && data[geo.id][metric] === 0 ? '#e1dce2' : '#FFFFFF',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      });\n    }));\n  })));\n}","map":{"version":3,"sources":["/Users/lisasun/Documents/Dashboard/MondoDB/portal_new/stitch-tutorial-todo-web/src/components/GAMap.js"],"names":["React","useEffect","useState","Container","Grid","Dropdown","Breadcrumb","Header","List","Loader","Divider","Image","geoCentroid","Geographies","Geography","ComposableMap","ReactTooltip","useHistory","_","scaleQuantile","configs","ReactDOM","numberWithCommas","x","toString","pattern","test","replace","geoUrl","colorPalette","colorHighlight","GAMap","props","stateName","setStateName","fips","setFips","tooltipContent","setTooltipContent","history","dataFltrd","setDataFltrd","dataStateFltrd","setDataStateFltrd","dataState","setDataState","data","setData","date","setDate","stateLabels","setStateLabels","colorScale","setColorScale","legendMax","setLegendMax","legendMin","setLegendMin","legendSplit","setLegendSplit","metric","setMetric","scale","geographies","map","geo","rsmKey","id"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { Container, Grid, Dropdown, Breadcrumb, Header, List, Loader, Divider, Image } from 'semantic-ui-react'\nimport { geoCentroid } from \"d3-geo\";\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\nimport ReactTooltip from \"react-tooltip\";\nimport { useHistory } from \"react-router-dom\";\nimport _ from 'lodash';\nimport { scaleQuantile } from \"d3-scale\";\nimport configs from \"./state_config.json\";\nimport ReactDOM from 'react-dom';\n\n\nfunction numberWithCommas(x) {\n    x = x.toString();\n    var pattern = /(-?\\d+)(\\d{3})/;\n    while (pattern.test(x))\n        x = x.replace(pattern, \"$1,$2\");\n    return x;\n}\n\n//const geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\n//const geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/counties-10m.json\"\nconst geoUrl =\"https://raw.githubusercontent.com/deldersveld/topojson/master/countries/us-states/GA-13-georgia-counties.json\"\nconst colorPalette = [\n        \"#e1dce2\",\n        \"#d3b6cd\",\n        \"#bf88b5\", \n        \"#af5194\", \n        \"#99528c\", \n        \"#633c70\", \n      ];\nconst colorHighlight = '#f2a900';\n\n\nexport default function GAMap(props) {\n\n  const [stateName, setStateName] = useState('Georgia');\n  const [fips, setFips] = useState('13');\n  const [tooltipContent, setTooltipContent] = useState('');\n  const history = useHistory();\n  const [dataFltrd, setDataFltrd] = useState();\n\n  const [dataStateFltrd, setDataStateFltrd] = useState();\n  const [dataState, setDataState] = useState();\n\n  const [data, setData] = useState();\n  const [date, setDate] = useState('');\n  const [stateLabels, setStateLabels] = useState();\n  const [colorScale, setColorScale] = useState();\n\n  const [legendMax, setLegendMax] = useState([]);\n  const [legendMin, setLegendMin] = useState([]);\n  const [legendSplit, setLegendSplit] = useState([]);\n\n  const [metric, setMetric] = useState('mean7daycases');\n\n\n  return (\n      <div>\n              \n        <ComposableMap \n          projection=\"geoAlbersUsa\" \n          data-tip=\"\"\n          width={630} \n          height={380}\n          strokeWidth= {0.1}\n          stroke= 'black'\n          projectionConfig={{scale: 750}}\n           >\n          <Geographies geography={geoUrl}>\n            {({ geographies }) => \n              <svg>\n                {geographies.map(geo => (\n                  <Geography\n                    key={geo.rsmKey}\n                    geography={geo}\n                  \n                    // onMouseEnter={()=>{\n\n                    //   //console.log(geo); \n                    //   const stateFips = geo.id.substring(0,2);\n                    //   //const stateFips = 13;\n                    //   console.log(stateFips)\n                    //   const configMatched = configs.find(s => s.fips === stateFips);\n\n                    //   setFips(stateFips);\n                    //   setStateName(configMatched.name);\n                    //   //setStateName(geo.id.substring(0,2));\n                    //   //setStateName(geo.properties.name); \n                    //   //setTooltipContent()                            \n                    \n                    // }}\n\n\n\n                    // onMouseLeave={()=>{\n                    //   setTooltipContent(\"\")\n                    // }}\n                    // onClick={()=>{\n                    //   history.push(\"/\"+geo.id.substring(0,2)+\"\");\n                    // }}\n\n                    \n                    //fill={fips===geo.id.substring(0,2)?colorHighlight:\n                    fill={fips===13?colorHighlight:\n                    ((colorScale && data[geo.id] && (data[geo.id][metric]) > 0)?\n                        colorScale[data[geo.id][metric]]: \n                        (colorScale && data[geo.id] && data[geo.id][metric] === 0)?\n                          '#e1dce2':'#FFFFFF')}\n                  />\n                ))}\n              </svg>\n            }\n          </Geographies>\n        </ComposableMap>      \n      </div>\n      );\n}"]},"metadata":{},"sourceType":"module"}