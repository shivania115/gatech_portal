{"ast":null,"code":"import _regeneratorRuntime from \"/Users/lisasun/Documents/Dashboard/MondoDB/portal_new/stitch-tutorial-todo-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/lisasun/Documents/Dashboard/MondoDB/portal_new/stitch-tutorial-todo-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/Users/lisasun/Documents/Dashboard/MondoDB/portal_new/stitch-tutorial-todo-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/lisasun/Documents/Dashboard/MondoDB/portal_new/stitch-tutorial-todo-web/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/lisasun/Documents/Dashboard/MondoDB/portal_new/stitch-tutorial-todo-web/src/components/StitchAuth.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { hasLoggedInUser, loginAnonymous, logoutCurrentUser, getCurrentUser } from \"./../stitch/authentication\"; // Create a React Context that lets us expose and access auth state\n// without passing props through many levels of the component tree\n\nvar StitchAuthContext = React.createContext(); // Create a React Hook that lets us get data from our auth context\n\nexport function useStitchAuth() {\n  var context = React.useContext(StitchAuthContext);\n\n  if (!context) {\n    throw new Error(\"useStitchAuth must be used within a StitchAuthProvider\");\n  }\n\n  return context;\n} // Create a component that controls auth state and exposes it via\n// the React Context we created.\n\nexport function StitchAuthProvider(props) {\n  var _React$useState = React.useState({\n    isLoggedIn: hasLoggedInUser(),\n    currentUser: getCurrentUser()\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      authState = _React$useState2[0],\n      setAuthState = _React$useState2[1]; // Authentication Actions\n\n\n  var handleAnonymousLogin =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var isLoggedIn, loggedInUser;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              isLoggedIn = authState.isLoggedIn;\n\n              if (isLoggedIn) {\n                _context.next = 6;\n                break;\n              }\n\n              _context.next = 4;\n              return loginAnonymous();\n\n            case 4:\n              loggedInUser = _context.sent;\n              setAuthState(_objectSpread({}, authState, {\n                isLoggedIn: true,\n                currentUser: loggedInUser\n              }));\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleAnonymousLogin() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var handleLogout =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var isLoggedIn;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              isLoggedIn = authState.isLoggedIn;\n\n              if (!isLoggedIn) {\n                _context2.next = 7;\n                break;\n              }\n\n              _context2.next = 4;\n              return logoutCurrentUser();\n\n            case 4:\n              setAuthState(_objectSpread({}, authState, {\n                isLoggedIn: false,\n                currentUser: null\n              }));\n              _context2.next = 8;\n              break;\n\n            case 7:\n              console.log(\"can't handleLogout when no user is logged in\");\n\n            case 8:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function handleLogout() {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // We useMemo to improve performance by eliminating some re-renders\n\n\n  var authInfo = React.useMemo(function () {\n    var isLoggedIn = authState.isLoggedIn,\n        currentUser = authState.currentUser;\n    var value = {\n      isLoggedIn: isLoggedIn,\n      currentUser: currentUser,\n      actions: {\n        handleAnonymousLogin: handleAnonymousLogin,\n        handleLogout: handleLogout\n      }\n    };\n    return value;\n  }, [authState.isLoggedIn]);\n  return React.createElement(StitchAuthContext.Provider, {\n    value: authInfo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, props.children);\n}\nStitchAuthProvider.propTypes = {\n  children: PropTypes.element\n};","map":{"version":3,"sources":["/Users/lisasun/Documents/Dashboard/MondoDB/portal_new/stitch-tutorial-todo-web/src/components/StitchAuth.js"],"names":["React","PropTypes","hasLoggedInUser","loginAnonymous","logoutCurrentUser","getCurrentUser","StitchAuthContext","createContext","useStitchAuth","context","useContext","Error","StitchAuthProvider","props","useState","isLoggedIn","currentUser","authState","setAuthState","handleAnonymousLogin","loggedInUser","handleLogout","console","log","authInfo","useMemo","value","actions","children","propTypes","element"],"mappings":";;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SACEC,eADF,EAEEC,cAFF,EAGEC,iBAHF,EAIEC,cAJF,QAKO,4BALP,C,CAOA;AACA;;AACA,IAAMC,iBAAiB,GAAGN,KAAK,CAACO,aAAN,EAA1B,C,CAEA;;AACA,OAAO,SAASC,aAAT,GAAyB;AAC9B,MAAMC,OAAO,GAAGT,KAAK,CAACU,UAAN,CAAiBJ,iBAAjB,CAAhB;;AACA,MAAI,CAACG,OAAL,EAAc;AACZ,UAAM,IAAIE,KAAJ,0DAAN;AACD;;AACD,SAAOF,OAAP;AACD,C,CAED;AACA;;AACA,OAAO,SAASG,kBAAT,CAA4BC,KAA5B,EAAmC;AAAA,wBACNb,KAAK,CAACc,QAAN,CAAe;AAC/CC,IAAAA,UAAU,EAAEb,eAAe,EADoB;AAE/Cc,IAAAA,WAAW,EAAEX,cAAc;AAFoB,GAAf,CADM;AAAA;AAAA,MACjCY,SADiC;AAAA,MACtBC,YADsB,wBAMxC;;;AACA,MAAMC,oBAAoB;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACnBJ,cAAAA,UADmB,GACJE,SADI,CACnBF,UADmB;;AAAA,kBAEtBA,UAFsB;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAGEZ,cAAc,EAHhB;;AAAA;AAGnBiB,cAAAA,YAHmB;AAIzBF,cAAAA,YAAY,mBACPD,SADO;AAEVF,gBAAAA,UAAU,EAAE,IAFF;AAGVC,gBAAAA,WAAW,EAAEI;AAHH,iBAAZ;;AAJyB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAApBD,oBAAoB;AAAA;AAAA;AAAA,KAA1B;;AAWA,MAAME,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,6BAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACXN,cAAAA,UADW,GACIE,SADJ,CACXF,UADW;;AAAA,mBAEfA,UAFe;AAAA;AAAA;AAAA;;AAAA;AAAA,qBAGXX,iBAAiB,EAHN;;AAAA;AAIjBc,cAAAA,YAAY,mBACPD,SADO;AAEVF,gBAAAA,UAAU,EAAE,KAFF;AAGVC,gBAAAA,WAAW,EAAE;AAHH,iBAAZ;AAJiB;AAAA;;AAAA;AAUjBM,cAAAA,OAAO,CAACC,GAAR;;AAViB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAZF,YAAY;AAAA;AAAA;AAAA,KAAlB,CAlBwC,CAgCxC;;;AACA,MAAMG,QAAQ,GAAGxB,KAAK,CAACyB,OAAN,CACf,YAAM;AAAA,QACIV,UADJ,GACgCE,SADhC,CACIF,UADJ;AAAA,QACgBC,WADhB,GACgCC,SADhC,CACgBD,WADhB;AAEJ,QAAMU,KAAK,GAAG;AACZX,MAAAA,UAAU,EAAVA,UADY;AAEZC,MAAAA,WAAW,EAAXA,WAFY;AAGZW,MAAAA,OAAO,EAAE;AAAER,QAAAA,oBAAoB,EAApBA,oBAAF;AAAwBE,QAAAA,YAAY,EAAZA;AAAxB;AAHG,KAAd;AAKA,WAAOK,KAAP;AACD,GATc,EAUf,CAACT,SAAS,CAACF,UAAX,CAVe,CAAjB;AAYA,SACE,oBAAC,iBAAD,CAAmB,QAAnB;AAA4B,IAAA,KAAK,EAAES,QAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGX,KAAK,CAACe,QADT,CADF;AAKD;AACDhB,kBAAkB,CAACiB,SAAnB,GAA+B;AAC7BD,EAAAA,QAAQ,EAAE3B,SAAS,CAAC6B;AADS,CAA/B","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  hasLoggedInUser,\n  loginAnonymous,\n  logoutCurrentUser,\n  getCurrentUser,\n} from \"./../stitch/authentication\";\n\n// Create a React Context that lets us expose and access auth state\n// without passing props through many levels of the component tree\nconst StitchAuthContext = React.createContext();\n\n// Create a React Hook that lets us get data from our auth context\nexport function useStitchAuth() {\n  const context = React.useContext(StitchAuthContext);\n  if (!context) {\n    throw new Error(`useStitchAuth must be used within a StitchAuthProvider`);\n  }\n  return context;\n}\n\n// Create a component that controls auth state and exposes it via\n// the React Context we created.\nexport function StitchAuthProvider(props) {\n  const [authState, setAuthState] = React.useState({\n    isLoggedIn: hasLoggedInUser(),\n    currentUser: getCurrentUser(),\n  });\n\n  // Authentication Actions\n  const handleAnonymousLogin = async () => {\n    const { isLoggedIn } = authState;\n    if (!isLoggedIn) {\n      const loggedInUser = await loginAnonymous();\n      setAuthState({\n        ...authState,\n        isLoggedIn: true,\n        currentUser: loggedInUser,\n      });\n    }\n  };\n  const handleLogout = async () => {\n    const { isLoggedIn } = authState;\n    if (isLoggedIn) {\n      await logoutCurrentUser();\n      setAuthState({\n        ...authState,\n        isLoggedIn: false,\n        currentUser: null,\n      });\n    } else {\n      console.log(`can't handleLogout when no user is logged in`);\n    }\n  };\n\n  // We useMemo to improve performance by eliminating some re-renders\n  const authInfo = React.useMemo(\n    () => {\n      const { isLoggedIn, currentUser } = authState;\n      const value = {\n        isLoggedIn,\n        currentUser,\n        actions: { handleAnonymousLogin, handleLogout },\n      };\n      return value;\n    },\n    [authState.isLoggedIn],\n  );\n  return (\n    <StitchAuthContext.Provider value={authInfo}>\n      {props.children}\n    </StitchAuthContext.Provider>\n  );\n}\nStitchAuthProvider.propTypes = {\n  children: PropTypes.element,\n};\n"]},"metadata":{},"sourceType":"module"}