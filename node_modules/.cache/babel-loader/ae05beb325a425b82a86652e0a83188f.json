{"ast":null,"code":"import _slicedToArray from \"/Users/lisasun/Documents/Dashboard/MondoDB/gatech_portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useMemo, useState, useEffect, useContext } from \"react\";\nimport { MapContext } from \"./MapProvider\";\nimport { fetchGeographies, getFeatures, prepareFeatures, isString } from \"./utils\";\nexport default function useGeographies(_ref) {\n  var geography = _ref.geography,\n      parseGeographies = _ref.parseGeographies;\n\n  var _useContext = useContext(MapContext),\n      path = _useContext.path;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      geographies = _useState2[0],\n      setGeographies = _useState2[1];\n\n  useEffect(function () {\n    if (typeof window === \"undefined\") return;\n\n    if (isString(geography)) {\n      fetchGeographies(geography).then(function (geos) {\n        if (geos) setGeographies(getFeatures(geos, parseGeographies));\n      });\n    } else {\n      setGeographies(getFeatures(geography, parseGeographies));\n    }\n  }, [geography, parseGeographies]);\n  var output = useMemo(function () {\n    return prepareFeatures(geographies, path);\n  }, [geographies, path]);\n  return {\n    geographies: output\n  };\n}","map":{"version":3,"sources":["/Users/lisasun/Documents/Dashboard/MondoDB/gatech_portal/src/components/useGeographies.js"],"names":["useMemo","useState","useEffect","useContext","MapContext","fetchGeographies","getFeatures","prepareFeatures","isString","useGeographies","geography","parseGeographies","path","geographies","setGeographies","window","then","geos","output"],"mappings":";AACA,SAASA,OAAT,EAAkBC,QAAlB,EAA4BC,SAA5B,EAAuCC,UAAvC,QAAyD,OAAzD;AACA,SAASC,UAAT,QAA2B,eAA3B;AAEA,SAASC,gBAAT,EAA2BC,WAA3B,EAAwCC,eAAxC,EAAyDC,QAAzD,QAAyE,SAAzE;AAEA,eAAe,SAASC,cAAT,OAAyD;AAAA,MAA/BC,SAA+B,QAA/BA,SAA+B;AAAA,MAApBC,gBAAoB,QAApBA,gBAAoB;;AAAA,oBACrDR,UAAU,CAACC,UAAD,CAD2C;AAAA,MAC9DQ,IAD8D,eAC9DA,IAD8D;;AAAA,kBAEhCX,QAAQ,EAFwB;AAAA;AAAA,MAE/DY,WAF+D;AAAA,MAElDC,cAFkD;;AAItEZ,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,OAAOa,MAAP,gBAAJ,EAAmC;;AAEnC,QAAIP,QAAQ,CAACE,SAAD,CAAZ,EAAyB;AACvBL,MAAAA,gBAAgB,CAACK,SAAD,CAAhB,CAA4BM,IAA5B,CAAiC,UAAAC,IAAI,EAAI;AACvC,YAAIA,IAAJ,EAAUH,cAAc,CAACR,WAAW,CAACW,IAAD,EAAON,gBAAP,CAAZ,CAAd;AACX,OAFD;AAGD,KAJD,MAIO;AACLG,MAAAA,cAAc,CAACR,WAAW,CAACI,SAAD,EAAYC,gBAAZ,CAAZ,CAAd;AACD;AACF,GAVQ,EAUN,CAACD,SAAD,EAAYC,gBAAZ,CAVM,CAAT;AAYA,MAAMO,MAAM,GAAGlB,OAAO,CAAC,YAAM;AAC3B,WAAOO,eAAe,CAACM,WAAD,EAAcD,IAAd,CAAtB;AACD,GAFqB,EAEnB,CAACC,WAAD,EAAcD,IAAd,CAFmB,CAAtB;AAIA,SAAO;AAAEC,IAAAA,WAAW,EAAEK;AAAf,GAAP;AACD","sourcesContent":["\nimport { useMemo, useState, useEffect, useContext } from \"react\"\nimport { MapContext } from \"./MapProvider\"\n\nimport { fetchGeographies, getFeatures, prepareFeatures, isString } from \"./utils\"\n\nexport default function useGeographies({ geography, parseGeographies }) {\n  const { path } = useContext(MapContext)\n  const [geographies, setGeographies] = useState()\n\n  useEffect(() => {\n    if (typeof window === `undefined`) return\n\n    if (isString(geography)) {\n      fetchGeographies(geography).then(geos => {\n        if (geos) setGeographies(getFeatures(geos, parseGeographies))\n      })\n    } else {\n      setGeographies(getFeatures(geography, parseGeographies))\n    }\n  }, [geography, parseGeographies])\n\n  const output = useMemo(() => {\n    return prepareFeatures(geographies, path)\n  }, [geographies, path])\n\n  return { geographies: output }\n}\n"]},"metadata":{},"sourceType":"module"}