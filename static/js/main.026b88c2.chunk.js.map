{"version":3,"sources":["components/MapProvider.js","components/utils.js","components/useGeographies.js","components/Geographies.js","components/Geography.js","components/ComposableMap.js","stitch/app.js","stitch/mongodb.js","components/GADMProvider.js","components/GAMap.js","components/GADiabetes.js","stitch/authentication.js","components/StitchAuth.js","components/App.js","index.js"],"names":["geoPath","d3Geo","projections","MapContext","createContext","MapProvider","_ref2","width","height","offsetX","offsetY","projection","projectionConfig","restProps","Object","objectWithoutProperties","_ref3","center","_ref4","slicedToArray","cx","cy","_ref5","rotate","_ref6","rx","ry","rz","_ref7","parallels","_ref8","p1","p2","s","scale","projMemo","useMemo","_ref","_ref$projectionConfig","_ref$projection","_ref$width","_ref$height","_ref$offsetX","_ref$offsetY","scl","proj","translate","forEach","d","makeProjection","useCallback","value","path","react_default","a","createElement","Provider","assign","getFeatures","geographies","parseGeographies","Array","isArray","feats","feature","objects","keys","features","console","log","useGeographies","geography","useContext","_useState","useState","_useState2","setGeographies","useEffect","url","window","fetch","then","res","ok","Error","statusText","json","catch","error","geos","map","i","objectSpread","rsmKey","concat","svgPath","prepareFeatures","Geographies","children","_ref$className","className","_useContext","length","memo","onMouseEnter","onMouseLeave","onMouseDown","onMouseUp","onFocus","onBlur","_ref$style","style","isPressed","setPressed","_useState3","_useState4","isFocused","setFocus","tabIndex","evt","ComposableMap","MapProvider_MapProvider","app","Stitch","hasAppClient","getAppClient","initializeAppClient","gatech","getServiceClient","RemoteMongoClient","factory","db","collection","GADMContext","React","useGADM","context","GADMProvider","props","_React$useState","selectedTable","tableName","qryName","selectedVariable","varName","printName","selectedCounty","NAME","fetchedData","_React$useState2","pageState","setPageState","handlePageStateChange","doc","pageInfo","actions","geoUrl","GAMap","hover","setHover","_useGADM","colorPalette","mapColor","setMapColor","varData","_","scaler","scaleQuantile","domain","range","scaleMap","item","county","components_ComposableMap","data-tip","strokeWidth","stroke","components_Geographies","geo","components_Geography","key","onClick","properties","GEOID","fill","DetTable","categories","count","setCount","stateAvg","setStateAvg","GetValue","asyncToGenerator","regenerator_default","mark","_callee","query","prom","countArray","byGroup","i1","resultArray","mean","wrap","_context","prev","next","subgroup","find","subsubgroup","toArray","sent","sortBy","filter","groupBy","meanBy","reject","o","push","toFixed","stop","apply","this","arguments","zipped","obj","index","val","Table","Row","Cell","Body","MenuButton","_useGADM2","Menu","pointing","vertical","Item","name","active","DataPanel","_useGADM3","_useState5","_useState6","Grid","Column","Header","as","fontWeight","Subheader","columns","textAlign","paddingTop","selectable","basic","size","HeaderCell","borderTop","MapPanel","_useGADM4","GADiabetes","Container","List","bulleted","Divider","loginAnonymous","credential","AnonymousCredential","auth","loginWithCredential","getCurrentUser","isLoggedIn","user","logoutCurrentUser","logoutUserWithId","id","StitchAuthContext","StitchAuthProvider","currentUser","authState","setAuthState","handleAnonymousLogin","loggedInUser","handleLogout","_callee2","_context2","authInfo","AppUI","_useStitchAuth","useStitchAuth","_useStitchAuth$action","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.026b88c2.chunk.js","sourcesContent":["\nimport React, {\n  createContext,\n  useMemo,\n  useCallback,\n} from \"react\"\nimport PropTypes from \"prop-types\"\nimport * as d3Geo from \"d3-geo\"\n\nconst { geoPath, ...projections } = d3Geo\n\nconst MapContext = createContext()\n\nconst makeProjection = ({\n  projectionConfig = {},\n  projection = \"geoEqualEarth\",\n  width = 800,\n  height = 600,\n  offsetX = 0,\n  offsetY = 0\n}) => {\n  const isFunc = typeof projection === \"function\"\n\n  if (isFunc) return projection\n\n  const scl = projectionConfig.scale || null;\n\n  //let proj = projections[projection]().translate([width/2 + (offsetX)*scl/1000 ,height/2 + (offsetY)*scl/1000]);\n  //let proj = projections[projection]().translate([width/2000 + (offsetX)*scl/1000 ,height/2000 + (offsetY)*scl/1000]);\n  let proj = projections[projection]().translate([width/2 + (offsetX)*scl/1000 ,height + (offsetY)*scl/1000]).rotate([82 + 10 / 60, -30]).scale(100);\n\n  const supported = [\n    proj.center ? \"center\" : null,\n    proj.rotate ? \"rotate\" : null,\n    proj.scale ? \"scale\" : null,\n    proj.parallels ? \"parallels\" : null,\n  ]\n\n  supported.forEach(d => {\n    if (!d) return\n    proj = proj[d](projectionConfig[d] || proj[d]())\n  })\n\n  return proj\n}\n\nconst MapProvider = ({\n  width,\n  height,\n  offsetX,\n  offsetY,\n  projection,\n  projectionConfig,\n  ...restProps\n}) => {\n  const [cx, cy] = projectionConfig.center || []\n  const [rx, ry, rz] = projectionConfig.rotate || []\n  const [p1, p2] = projectionConfig.parallels || []\n  const s = projectionConfig.scale || null\n\n  const projMemo = useMemo(() => {\n    return makeProjection({\n      projectionConfig: {\n        center: (cx || cx === 0) || (cy || cy === 0) ? [cx, cy] : null,\n        rotate: (rx || rx === 0) || (ry || ry === 0) ? [rx, ry, rz] : null,\n        parallels: (p1 || p1 === 0) || (p2 || p2 === 0) ? [p1, p2] : null,\n        scale: s,\n      },\n      projection,\n      width,\n      height,\n      offsetX,\n      offsetY,\n    })\n  }, [ width, height, projection, cx, cy, rx, ry, rz, p1, p2, s, offsetX, offsetY ])\n\n  const proj = useCallback(projMemo, [projMemo])\n\n  const value = useMemo(() => {\n    return {\n      width,\n      height,\n      projection: proj,\n      path: geoPath().projection(proj),\n    }\n  }, [ width, height, proj ])\n\n  return (<MapContext.Provider value={value} {...restProps} />)\n}\n\nMapProvider.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  offsetX: PropTypes.number,\n  offsetY: PropTypes.number,\n  projection: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n  ]),\n  projectionConfig: PropTypes.object,\n}\n\nexport { MapProvider, MapContext }\n","\nimport { feature } from \"topojson-client\"\n\nexport function getCoords(w, h, t) {\n  const xOffset = (w * t.k - w) / 2\n  const yOffset = (h * t.k - h) / 2\n  return [w / 2 - (xOffset + t.x) / t.k, h / 2 - (yOffset + t.y) / t.k]\n}\n\nexport function fetchGeographies(url) {\n  return fetch(url)\n    .then(res => {\n      if (!res.ok) {\n        throw Error(res.statusText)\n      }\n      return res.json()\n    }).catch(error => {\n      console.log(\"There was a problem when fetching the data: \", error)\n    })\n}\n\nexport function getFeatures(geographies, parseGeographies) {\n  if (Array.isArray(geographies)) return parseGeographies ? parseGeographies(geographies) : geographies\n  const feats = feature(\n    geographies,\n    geographies.objects[Object.keys(geographies.objects)[0]]\n  ).features\n  console.log(geographies.objects[Object.keys(geographies.objects)[0]])\n  return parseGeographies ? parseGeographies(feats) : feats\n}\n\nexport function prepareFeatures(geographies, path) {\n  return geographies ? geographies.map((d, i) => {\n    return {\n      ...d,\n      rsmKey: `geo-${i}`,\n      svgPath: path(d),\n    }\n  }) : []\n}\n\nexport function createConnectorPath(dx = 30, dy = 30, curve = 0.5) {\n  const curvature = Array.isArray(curve) ? curve : [curve, curve]\n  const curveX = dx / 2 * curvature[0]\n  const curveY = dy / 2 * curvature[1]\n  return `M${0},${0} Q${-dx / 2 - curveX},${-dy / 2 + curveY} ${-dx},${-dy}`\n}\n\nexport function isString(geo) { return typeof geo === \"string\" }\n","\nimport { useMemo, useState, useEffect, useContext } from \"react\"\nimport { MapContext } from \"./MapProvider\"\n\nimport { fetchGeographies, getFeatures, prepareFeatures, isString } from \"./utils\"\n\nexport default function useGeographies({ geography, parseGeographies }) {\n  const { path } = useContext(MapContext)\n  const [geographies, setGeographies] = useState()\n\n  useEffect(() => {\n    if (typeof window === `undefined`) return\n\n    if (isString(geography)) {\n      fetchGeographies(geography).then(geos => {\n        if (geos) setGeographies(getFeatures(geos, parseGeographies))\n      })\n    } else {\n      setGeographies(getFeatures(geography, parseGeographies))\n    }\n  }, [geography, parseGeographies])\n\n  const output = useMemo(() => {\n    return prepareFeatures(geographies, path)\n  }, [geographies, path])\n\n  return { geographies: output }\n}\n","\nimport React, { useContext } from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapContext } from \"./MapProvider\"\nimport useGeographies from \"./useGeographies\"\n\nconst Geographies = ({\n  geography,\n  children,\n  parseGeographies,\n  className = \"\",\n  ...restProps\n}) => {\n  const { path, projection } = useContext(MapContext)\n  const { geographies } = useGeographies({ geography, parseGeographies })\n\n  return (\n    <g className={`rsm-geographies ${className}`} \n    height={100}\n    {...restProps}>\n      {\n        geographies && geographies.length > 0 &&\n        children({ geographies, path, projection })\n      }\n    </g>\n  )\n}\n\nGeographies.propTypes = {\n  geography: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.object,\n    PropTypes.array,\n  ]),\n  children: PropTypes.func,\n  parseGeographies: PropTypes.func,\n  className: PropTypes.string,\n}\n\nexport default Geographies\n","\nimport React, { useState, memo } from \"react\"\nimport PropTypes from \"prop-types\"\n\nconst Geography = ({\n  geography,\n  onMouseEnter,\n  onMouseLeave,\n  onMouseDown,\n  onMouseUp,\n  onFocus,\n  onBlur,\n  style = {},\n  className = \"\",\n  ...restProps\n}) => {\n  const [isPressed, setPressed] = useState(false)\n  const [isFocused, setFocus] = useState(false)\n\n  function handleMouseEnter(evt) {\n    setFocus(true)\n    if (onMouseEnter) onMouseEnter(evt)\n  }\n\n  function handleMouseLeave(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onMouseLeave) onMouseLeave(evt)\n  }\n\n  function handleFocus(evt) {\n    setFocus(true)\n    if (onFocus) onFocus(evt)\n  }\n\n  function handleBlur(evt) {\n    setFocus(false)\n    if (isPressed) setPressed(false)\n    if (onBlur) onBlur(evt)\n  }\n\n  function handleMouseDown(evt) {\n    setPressed(true)\n    if (onMouseDown) onMouseDown(evt)\n  }\n\n  function handleMouseUp(evt) {\n    setPressed(false)\n    if (onMouseUp) onMouseUp(evt)\n  }\n\n  return (\n    <path\n      tabIndex=\"0\"\n      className={`rsm-geography ${className}`}\n      d={geography.svgPath}\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onFocus={handleFocus}\n      onBlur={handleBlur}\n      onMouseDown={handleMouseDown}\n      onMouseUp={handleMouseUp}\n      style={style[isPressed || isFocused ? (isPressed ? \"pressed\" : \"hover\") : \"default\"]}\n      {...restProps}\n    />\n  )\n}\n\nGeography.propTypes = {\n  geography: PropTypes.object,\n  onMouseEnter: PropTypes.func,\n  onMouseLeave: PropTypes.func,\n  onMouseDown: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  onFocus: PropTypes.func,\n  onBlur: PropTypes.func,\n  style: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default memo(Geography)\n","\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport { MapProvider } from \"./MapProvider\"\n\nconst ComposableMap = ({\n  width = 800,\n  height = 600,\n  offsetX = 0,\n  offsetY = 0,\n  projection = \"geoEqualEarth\",\n  projectionConfig = {},\n  className = \"\",\n  ...restProps\n}) => {\n  return (\n    <MapProvider\n      width={width}\n      height={height}\n      offsetX={offsetX}\n      offsetY={offsetY}\n      projection={projection}\n      projectionConfig={projectionConfig}\n    >\n      <svg\n        width={width}\n        height={height}\n        className={`rsm-svg ${className}`}\n        {...restProps}\n      />\n    </MapProvider>\n  )\n}\n\nComposableMap.propTypes = {\n  width: PropTypes.number,\n  height: PropTypes.number,\n  projection: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.func,\n  ]),\n  projectionConfig: PropTypes.object,\n  className: PropTypes.string,\n}\n\nexport default ComposableMap\n","import { Stitch } from \"mongodb-stitch-browser-sdk\";\n\n// TODO: Add your Stitch app's App ID\nconst APP_ID = \"test-owzgf\";\n\n// TODO: Initialize the app client\nconst app = Stitch.hasAppClient(APP_ID)\n  ? Stitch.getAppClient(APP_ID)\n  : Stitch.initializeAppClient(APP_ID);\n\nexport { app };\n","import { RemoteMongoClient } from \"mongodb-stitch-browser-sdk\";\nimport { app } from \"./app\";\n\n// TODO: Initialize a MongoDB Service Client\nconst mongoClient = app.getServiceClient(\n  RemoteMongoClient.factory,\n  \"mongodb-atlas\"\n);\n\n// TODO: Instantiate a collection handle for todo.items\nconst gatech = mongoClient.db(\"healthequity\").collection(\"gatech\");\n\nexport { gatech };\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {gatech} from '../stitch/mongodb';\nimport _ from 'lodash';\n\nconst GADMContext = React.createContext();\n\n// Create a React Hook that lets us get data from our auth context\nexport function useGADM() {\n  const context = React.useContext(GADMContext);\n  if (!context) {\n    throw new Error(`useGADM must be used within a GADMProvider`);\n  }\n  return context;\n}\n\n// Create a component that controls auth state and exposes it via\n// the React Context we created.\nexport function GADMProvider(props) {\n\n  const [pageState, setPageState] = React.useState({\n    selectedTable: {tableName: 'Demographic Composition',qryName: 'Demographic Composition'},\n    selectedVariable: {'varName': '65 years or older', 'printName': 'Select a Variable to View ->'},\n    selectedCounty: {NAME: 'Fulton'},  //, GEOID: '13121',\n    fetchedData:[],\n  });\n\n  const handlePageStateChange = (doc) => {\n    setPageState({...pageState, ...doc});\n  };\n\n  // We useMemo to improve performance by eliminating some re-renders\n  const pageInfo = React.useMemo(\n    () => {\n      const { selectedTable, selectedVariable, selectedCounty, fetchedData } = pageState;\n      const value = {\n        selectedTable,\n        selectedVariable,\n        selectedCounty,\n        fetchedData,\n        actions: { handlePageStateChange },\n      };\n      return value;\n    },\n    [pageState],\n  );\n  return (\n    <GADMContext.Provider value={pageInfo}>\n      {props.children}\n    </GADMContext.Provider>\n  );\n}\nGADMProvider.propTypes = {\n  children: PropTypes.element,\n};\n","import React, { useEffect, useState } from 'react'\nimport Geographies from './Geographies';\nimport Geography from './Geography';\nimport ComposableMap from './ComposableMap';\nimport { scaleQuantile } from \"d3-scale\";\nimport {useGADM} from './GADMProvider';\nimport _ from 'lodash';\n\nconst geoUrl =\"https://raw.githubusercontent.com/deldersveld/topojson/master/countries/us-states/GA-13-georgia-counties.json\"\n\n\nexport default function GAMap(props) {\n  const [hover, setHover] = useState(0);\n  const {selectedVariable, \n    selectedCounty, \n    fetchedData,\n    actions: {handlePageStateChange}} = useGADM();\n  const colorPalette = [\n    \"#edcfa9\",\n    \"#e89f71\",\n    \"#d57149\", \n    \"#aa4a30\"\n  ];\n  const colorHighlight = '#89beb3';\n  const [mapColor, setMapColor] = useState(0);\n  \n  useEffect(()=>{\n    var varData = _.map(fetchedData[selectedVariable.varName],'value');\n    const scaler = scaleQuantile().domain(varData).range(colorPalette);\n    let scaleMap = {};\n    _.forEach(fetchedData[selectedVariable.varName], item => {\n      scaleMap[item.county] = scaler(item.value)\n    });\n    setMapColor(scaleMap);\n  },[selectedVariable]);\n\n\n  return (\n      <div>\n              \n        <ComposableMap \n          //projection=\"geoAlbersUsa\" \n          projection=\"geoTransverseMercator\"\n          data-tip=\"\"\n          width={760} \n          height={560}\n          strokeWidth= {0.5}\n          stroke= 'black'\n          projectionConfig={{scale: 6000}}\n           >\n          <Geographies geography={geoUrl}>\n            {({ geographies }) => \n              <svg>\n                {geographies.map(geo => (\n                  <Geography\n                    key={geo.rsmKey}\n                    geography={geo}\n                    onClick={()=>{\n                      handlePageStateChange({selectedCounty: geo.properties});\n                    }}\n                    onMouseEnter={()=>{\n                      //handlePageStateChange({selectedCounty: geo.properties});\n                      setHover(geo.properties.GEOID);\n                    }}\n                    onMouseLeave={()=>{\n                      setHover(0);\n                    }}\n                    fill = {(hover===geo.properties.GEOID) ? colorHighlight:\n                      (Object.keys(mapColor).length===0)? 'white':mapColor[(geo.properties.NAME+\" County\")]}\n                    strokeWidth = {selectedCounty.GEOID===geo.properties.GEOID ? 3:0.5}\n                    stroke = {selectedCounty.GEOID===geo.properties.GEOID ? 'white':'black'}\n                  />\n                ))}\n              </svg>\n            }\n          </Geographies>\n        </ComposableMap>      \n      </div>\n      );\n}","// React\nimport React, {useEffect, useState, setState} from \"react\";\nimport ErrorBoundary from \"react-error-boundary\";\nimport GAMap from \"./GAMap\";\nimport {GADMProvider, useGADM} from './GADMProvider';\nimport { \n  Container, \n  Grid, \n  Table,\n  Header,\n  Divider,\n  List\n} from 'semantic-ui-react'\nimport {gatech} from '../stitch/mongodb';\nimport { Menu } from 'semantic-ui-react'\nimport _ from 'lodash';\nimport { active } from \"d3\";\n\n\nfunction DetTable(props){\n  const categories = props.categories;\n  const [count,setCount] = useState([]);\n  const [stateAvg,setStateAvg] = useState([]);\n  const {selectedVariable, \n    selectedCounty, \n    selectedTable,\n    fetchedData,\n    actions: {handlePageStateChange}} = useGADM();\n  \n\n  const GetValue = async()=> {\n\n    const query = {\"subgroup\":selectedTable.qryName};\n    const prom = await gatech.find(query,{projection:{\"subsubgroup\":1,\"value\":1,\"county\":1}}).toArray();\n\n    //county stats\n    var countArray = _.sortBy(_.filter(prom,['county',selectedCounty.NAME+\" County\"]),['subsubgroup']);\n    setCount(countArray);\n    \n    //state avg stats\n    const byGroup = _.groupBy(prom,'subsubgroup');  // sets of subsubgroup; by table; sorted here i guess\n    handlePageStateChange({fetchedData:byGroup});   //save for map\n    var i1;\n    var resultArray = [];\n    for (i1 in byGroup){   // each subsubgroup,length 159\n      var mean = _.meanBy(_.reject(byGroup[i1],['value','N/A']),function(o){return o.value;});\n      resultArray.push(mean.toFixed(2));\n    }\n    setStateAvg(resultArray);\n  };\n  \n  useEffect(()=>{\n    GetValue();\n  }, [selectedCounty, selectedTable]);\n\n  const zipped = count.map((obj,index) =>{\n    var val;   //deal with na\n    if (obj.value!= \"N/A\"){\n      val = obj.value.toFixed(2);\n    } else {\n      val = obj.value;\n    }  \n    return(\n    <Table.Row key={index} onClick={()=>{\n           handlePageStateChange({selectedVariable: {varName:obj.subsubgroup,\n                                                    printName:categories[index]}\n                                                  });\n           }}>\n      <Table.Cell>{obj.subsubgroup}</Table.Cell>\n      <Table.Cell>{val}</Table.Cell>    \n    <Table.Cell>{stateAvg[index]}</Table.Cell>            \n    </Table.Row>);\n  });\n\n  return (\n    <Table.Body>{zipped}</Table.Body>\n  );\n}\n\n\nfunction MenuButton() {\n  const {selectedTable,\n        actions: {handlePageStateChange}} = useGADM();\n\n  return(\n    <Menu pointing vertical>\n      <Menu.Item name='Demographic Composition' \n                active = {selectedTable.tableName === 'Demographic Composition'}  \n                onClick={()=>{\n                  handlePageStateChange({selectedTable: {tableName:'Demographic Composition',\n                                                        qryName:'Demographic Composition'}});\n            }}/>\n      <Menu.Item name='Cardiometabolic Disease Morbidity' \n                active = {selectedTable.tableName === 'Cardiometabolic Disease Morbidity'}  \n                onClick={()=>{\n                      handlePageStateChange({selectedTable: {tableName:'Cardiometabolic Disease Morbidity',\n                                                            qryName:'Cardiometabolic disease morbidity'}});\n            }}/>\n      <Menu.Item name='Clinical Events' \n                active = {selectedTable.tableName === 'Clinical Events'}  \n                onClick={()=>{\n                      handlePageStateChange({selectedTable: {tableName:'Clinical Events',\n                                                            qryName:'Clinical events'}});\n            }}/>\n      <Menu.Item name='Lifestyle Related Risk Factors' \n                active = {selectedTable.tableName === 'Lifestyle Related Risk Factors'}  \n                onClick={()=>{\n                      handlePageStateChange({selectedTable: {tableName:'Lifestyle Related Risk Factors',\n                                                            qryName:'Lifestyle Related Risk Factors'}});\n            }}/>\n      <Menu.Item name='Health Care' \n                active = {selectedTable.tableName === 'Healthcare'}  \n                onClick={()=>{\n                      handlePageStateChange({selectedTable: {tableName:'Healthcare',\n                                                            qryName:'Healthcare'}});\n            }}/>\n      <Menu.Item name='Socioeconomic Factors' \n                active = { selectedTable.tableName === 'Socioeconomic Factors'}  \n                onClick={()=>{\n                    handlePageStateChange({selectedTable: {tableName:'Socioeconomic Factors',\n                                                          qryName:'Socioeconomic Factors'}});\n            }}/>\n    </Menu>\n  )\n}                          \n\nfunction DataPanel() {\n\n  const {selectedTable,\n    selectedVariable, \n    selectedCounty, \n    actions: {handlePageStateChange}} = useGADM();\n\n\n  const [count,setCount] = useState([]);\n\n\n  const RowCat = () =>{    // determines the printname\n    if (selectedTable.tableName===\"Demographic Composition\") {\n      return([\"% of 65 years or older\",\n                                    \"% of African American\",\n                                    \"% of Asian\",\n                                    \"% of Foreign born\",\n                                    \"% of Hispanic\",\n                                    \"Median age\",\n                                    \"Total Population (thousands)\",\n                                    \"% of Women\"]);\n    }\n    if (selectedTable.qryName===\"Cardiometabolic disease morbidity\") {\n      return([\"CHD Prevalence\",\n              \"Diabetes Prevalence\",\n              \"Hypertension Prevalence\",\n              \"Newly diagnosed diabetes\",\n              \"Obesity Prevalence\"]);\n    }\n    if (selectedTable.qryName===\"Clinical events\") {\n      return([\"CVD Deaths\",\n              \"CVD Hospitalizations\",\n              \"Diabetes Deaths\",\n              \"Diabetes Hospitalizations\",\n              \"Kidney Hospitalizations\"]);\n    }\n    if (selectedTable.qryName===\"Lifestyle Related Risk Factors\"){\n      return([\"Alcohol Consumption\",\n              \"Physical Inactivity\",\n              \"Sleep\",\n              \"Smoking\"]);\n    }\n    if (selectedTable.qryName===\"Healthcare\"){\n      return([\"% Diabetes in Medicaid Population\",\n              \"Cardiologists\",\n              \"Endocrinologists\",\n              \"Primary Care Doctors\",\n              \"% of Uninsured\"]);\n    }\n    if (selectedTable.qryName===\"Socioeconomic Factors\") {\n      return([\"Graduates High School in 4 Years\",\n              \"In Poverty\",\n              \"Income Inequality\",\n              \"Median Income (2015)\",\n              \"Unemployed\"]);\n    }\n  }\n\n  return (\n    <Grid>\n      <Grid.Row>\n        <Grid.Column>\n          <Header as='h3' style={{fontWeight: 300}}>\n            Statistics of {selectedCounty.NAME}\n            <Header.Subheader style={{fontWeight: 300}}>\n              The tables below show diabetes-related health determinants of the {selectedCounty.NAME} county.\n            </Header.Subheader>\n          </Header>\n        </Grid.Column>\n      </Grid.Row>\n      <Grid.Row columns={2}>\n        <Grid.Column textAlign=\"left\" style={{paddingTop: '2em'}}>\n          <MenuButton/>\n        </Grid.Column>\n        <Grid.Column textAlign=\"left\" style={{paddingTop: '2em'}}>\n          <Header as='h4' style={{fontWeight: 300}}>\n            {selectedTable.tableName}\n          </Header>\n          <Table selectable basic='very' size='small'>\n            <Table.Header>\n              <Table.Row>\n                <Table.HeaderCell style={{borderTop: 0}}>Variable</Table.HeaderCell>\n                <Table.HeaderCell style={{borderTop: 0}}>County Stat</Table.HeaderCell>\n                <Table.HeaderCell style={{borderTop: 0}}>State Stat</Table.HeaderCell>                                \n              </Table.Row>\n            </Table.Header>\n            <DetTable categories={RowCat()} />\n          </Table>\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n  );\n}\n\nfunction MapPanel() {\n  const {selectedVariable, \n    selectedCounty, \n    actions: {handlePageStateChange}} = useGADM();\n\n  return (\n    <Grid>\n      <Grid.Row>\n        <Grid.Column>\n          <Header as='h3' style={{fontWeight: 300}}>\n            {selectedVariable.printName}\n            <Header.Subheader style={{fontWeight: 300}}>\n              The color on the map shows the {selectedVariable.printName} of the Georgia Counties.\n            </Header.Subheader>\n          </Header>\n        </Grid.Column>\n      </Grid.Row>\n      <Grid.Row>\n        <Grid.Column>\n          <GAMap />\n        </Grid.Column>\n      </Grid.Row>\n    </Grid>\n    );\n\n}\n\nexport default function GADiabetes() {\n\n\n  return (\n    <GADMProvider>\n      <Container>\n        <Grid style={{paddingTop: '2em'}}>\n          <Grid.Row columns={1}>\n            <Grid.Column textAlign=\"center\">\n              <Header as='h1' style={{fontWeight: 300}}>\n                Georgia Diabetes Data Portal\n                <Header.Subheader style={{fontWeight: 300}}>\n                  Interactive Dashboard of Diabetes-related Health Determinants\n                </Header.Subheader>\n              </Header>\n              <Header as='h4' style={{fontWeight: 300}}>\n                A Quick User Guide\n              </Header>\n              <List bulleted style={{fontWeight: 300}} size=\"mini\">\n                <List.Item>\n                  Click on a county on the map located <i>(on the left)</i> <br/>\n                  to see its full statistics on the table <i>(on the right)</i>.\n                </List.Item>\n                <List.Item>\n                  Click on a variable on the table located <i>(on the right)</i> <br/>\n                  to see the county-level distribution on the map <i>(on the left)</i>.\n                </List.Item>                \n              </List>\n            </Grid.Column>\n          </Grid.Row>\n          <Divider/>\n          <Grid.Row columns={2}>\n            <Grid.Column width={8} textAlign=\"center\">\n              <MapPanel />\n            </Grid.Column>\n            <Grid.Column width={8} textAlign=\"center\">\n              <DataPanel />\n            </Grid.Column>\n          </Grid.Row>\n        </Grid>\n      </Container>\n    </GADMProvider>\n  );\n}\n","import { AnonymousCredential } from \"mongodb-stitch-browser-sdk\";\nimport { app } from \"./app.js\";\n\nexport function loginAnonymous() {\n  // Allow users to log in anonymously\n  const credential = new AnonymousCredential();\n  return app.auth.loginWithCredential(credential);\n}\n\nexport function hasLoggedInUser() {\n  // Check if there is currently a logged in user\n  return app.auth.isLoggedIn;\n}\n\nexport function getCurrentUser() {\n  // Return the user object of the currently logged in user\n  return app.auth.isLoggedIn ? app.auth.user : null;\n}\n\nexport function logoutCurrentUser() {\n  // Logout the currently logged in user\n  const user = getCurrentUser();\n  return app.auth.logoutUserWithId(user.id);\n}\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  hasLoggedInUser,\n  loginAnonymous,\n  logoutCurrentUser,\n  getCurrentUser,\n} from \"./../stitch/authentication\";\n\n// Create a React Context that lets us expose and access auth state\n// without passing props through many levels of the component tree\nconst StitchAuthContext = React.createContext();\n\n// Create a React Hook that lets us get data from our auth context\nexport function useStitchAuth() {\n  const context = React.useContext(StitchAuthContext);\n  if (!context) {\n    throw new Error(`useStitchAuth must be used within a StitchAuthProvider`);\n  }\n  return context;\n}\n\n// Create a component that controls auth state and exposes it via\n// the React Context we created.\nexport function StitchAuthProvider(props) {\n  const [authState, setAuthState] = React.useState({\n    isLoggedIn: hasLoggedInUser(),\n    currentUser: getCurrentUser(),\n  });\n\n  // Authentication Actions\n  const handleAnonymousLogin = async () => {\n    const { isLoggedIn } = authState;\n    if (!isLoggedIn) {\n      const loggedInUser = await loginAnonymous();\n      setAuthState({\n        ...authState,\n        isLoggedIn: true,\n        currentUser: loggedInUser,\n      });\n    }\n  };\n  const handleLogout = async () => {\n    const { isLoggedIn } = authState;\n    if (isLoggedIn) {\n      await logoutCurrentUser();\n      setAuthState({\n        ...authState,\n        isLoggedIn: false,\n        currentUser: null,\n      });\n    } else {\n      console.log(`can't handleLogout when no user is logged in`);\n    }\n  };\n\n  // We useMemo to improve performance by eliminating some re-renders\n  const authInfo = React.useMemo(\n    () => {\n      const { isLoggedIn, currentUser } = authState;\n      const value = {\n        isLoggedIn,\n        currentUser,\n        actions: { handleAnonymousLogin, handleLogout },\n      };\n      return value;\n    },\n    [authState.isLoggedIn],\n  );\n  return (\n    <StitchAuthContext.Provider value={authInfo}>\n      {props.children}\n    </StitchAuthContext.Provider>\n  );\n}\nStitchAuthProvider.propTypes = {\n  children: PropTypes.element,\n};\n","// React\nimport React, {useEffect, } from \"react\";\nimport styled from \"@emotion/styled\";\n// Components & Hooks\nimport GADiabetes from \"./GADiabetes\";\nimport { StitchAuthProvider, useStitchAuth } from \"./StitchAuth\";\nimport { Button } from \"reactstrap\";\n\nimport 'semantic-ui-css/semantic.min.css'\n\nApp.propTypes = {};\nexport default function App() {\n  return (\n    <StitchAuthProvider>\n      <AppUI />\n    </StitchAuthProvider>\n  );\n}\n\nAppUI.propTypes = {};\nfunction AppUI() {\n  const {\n    isLoggedIn,\n    actions: { handleLogout, handleAnonymousLogin },\n  } = useStitchAuth();\n\n  useEffect(()=>{\n    handleAnonymousLogin();\n  }, []);\n\n  return <GADiabetes/>;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n"],"sourceRoot":""}